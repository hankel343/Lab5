/*
 *Hankel Haldin
 *Lab 5: Number Guessing Game
 *Due: 11/2/2020
 *Generates a random number between 1 and 100. User has 20 guesses to guess correctly.
 *Program uses functions to encapsulate the blocks of code away from main.
 */

#include <iostream>
#include <stdlib.h>
#include <time.h>

using namespace std;

/*********************
* Function Prototypes*
**********************/

void GameBanner();

	//Precondition: Program is compiled successfully.
	//Postcondition: Prints a welcome message and instructions to the screen.

bool NumCompare();

	//Precondition: Program is compiled succesfully
	//Postcondition: Function determines if the user won or lost the game.

void WrongGuessMessage();
	
	//Precondition: The user has entered an incorrect guess as to what the random number is
	//Postcondition: 1 of 10 messages is printed to the screen to let the user know their guess was incorrect.

void SuccessMessage();

	//Precondition: The user has entered the correct guess.
	//Postcondition: 1 of 10 messages is printed to the screen to let the user know they have won.

void AnotherGameMessage();

	//Precondition: The user has either won or lost the game.
	//Postcondition: 1 of 10 messages is printed to the screen prompting the user for another game.

bool NewGameMenu();

	//Precondition: The user has either won or lost the game.
	//Postcondition: The program receives a boolean value to make a decision to either start a new game or terminate the program.

void ScoreBoard(int totalGames, int wins, int losses);

	//Precondition: Variables totalGames, wins, and losses are initialized and passed to the function
	//Postcondition: A scoreboard is printed that keeps track of total games played, wins, and losses.

void GameOver();

	//Precondition: The user has chosen to exit the game. (Return value of NewGameMenu must be false)
	//Postcondition: A parting message is printed to the screen.

int main()
{
	bool gameLoop = true;
	int totalGames = 0;
	int wins = 0;
	int losses = 0;

	//Following do-while is the game loop
	do
	{
		++totalGames; //Increments total number of games played.
		ScoreBoard(totalGames, wins, losses); //Prints initial scoreboard.

		GameBanner(); //Prints welcome message and instructions.

		if (NumCompare()) //If NumCompare returns true, user has guess random number correctly and wins
		{
			++wins;
			SuccessMessage(); //Prints success message
			AnotherGameMessage(); //Prompts user for another game
			if (NewGameMenu()) //If user chooses a new game, NewGameMenu() returns true 
			{
				gameLoop = true; //Loop control set to true
				continue; //New game is started
			}
			else //NewGameMenu() returns false and user has chosen to end program execution
			{
				gameLoop = false; //Loop control is set to false
				continue; //Game loop is exited
			}
		}
		else //User has lost the game by exceeding 20 guesses
		{
			++losses; //Loss count incremented
			if (NewGameMenu()) //If user chooses a new game, NewGameMenu() returns true
			{  
				gameLoop = true; //Loop control set to true.
				continue; //New game is started.
			}
			else //NewGameMenu() returns false and user has chosen to end program execution
			{
				gameLoop = false; //Loop control set to false
				continue; //Game loop is exited
			}
		}
	} while (gameLoop);

	GameOver(); //Prints parting message
	ScoreBoard(totalGames, wins, losses); //Prints final score board.

	cout << "\nGoodbye...";


	return 0;
}

void ScoreBoard(int totalGames, int wins, int losses)
{
	cout << "####################\n";
	cout << "Stats so far: \n";
	cout << "Number of games: " << totalGames << endl;
	cout << "Games won: " << wins << endl;
	cout << "Games lost: " << losses << endl;
	cout << "####################\n\n";
}

void GameBanner()
{
	cout << "*********************************************************************************\n";
	cout << "Instructions: \n";
	cout << "The computer has generated a random number between 1 inclusive and 100 inclusive.\n";
	cout << "You have twenty gueses to correctly guess what the secret number is.\n";
	cout << "Enter your first guess: ";
}

bool NumCompare()
{
	/*Even though code in GameBanner() says a random number has been generated, the number isn't generated until this point because
	* ranNum would be a non-local scope and it is important for the logic in this block, hense why it is defined and generated here.*/

	//Random number is generated
	int ranNum; //Stores random number generated by computer.
	srand(unsigned int(time(NULL))); //Seeds random number generator
	ranNum = rand() % 100 + 1; //Generates random numbers between 0 and 100. 
	/* A note on the above calculation: 
	 *The range of values that can be a remainder from division of a number q by a number n is 1 - n-1.
	 *So in this case ran() % 100 takes the modulo of whatever the local machines RAND_MAX() is -
	 *100 would not be included in the range of values because 100 is a multiple of 100, so -
	 *the range of values from the modulo operation can be 1 - 99, and by adding one to the operation we obtain 100.*/

	int guessesLeft = 19; //This shows the user how many guesses they have left during the game
	int guessCount = 1; //Count control for folowing loop that gives player 20 chances to guess the random number.

	int guess;
	cin >> guess;

	do
	{
		if (!cin) //User enters an invalid data type and causes the input stream to enter the failed state.
		{
			cout << "\n*************************************************************************\n";
			cout << "You entered an invalid data type.\n";
			cout << "Your input should be only integers between 1 inclusive and 100 inclusive.";
			cout << "\n*************************************************************************\n";
			cin.clear(); //This line clears the failure flag on the input stream.
			cin.ignore(1000, '\n'); //This line ignores anything else in the line that caused the input stream to fail. 1000 is arbitrary and skips 1000 chars in the input stream. Also uses new line char as a termination point.

			cout << "Try again: ";
			cin >> guess;
		}
		else if (isdigit(guess) && guess <= 0 || guess > 100) //User enters out of bounds number. isdigit() method is used to check if input is a number AND outside of the range on both sides.
		{ 
			cout << "\n****************************************\n";
			cout << "That number is out of range.\n";
			cout << "Your input should be between 1 inclusive and 100 inclusive\n";
			cout << "****************************************\n\n";
			cout << "Try again: ";
			cin >> guess;
		}
		else if (guess != ranNum) //User enters incorrect guess.
		{ 
			++guessCount;
			WrongGuessMessage(); //wrong guess returns a failure message.

			//Following if-else statement prints how many guesses the user has for each game.
			if (guessesLeft > 1)
				cout << "You have " << guessesLeft << " guesses left\n";
			else
				cout << "You have " << guessesLeft << " guess left!\n";
			guessesLeft--;

			cout << "Try again: ";
			cin >> guess;
		}
		else //User guesses random number.
		{ 
			return true; //NumCompare returns a true value to the main function
		}
	} while (guessCount < 20);

	cout << "\n\n*****************************************************\n";
	cout << "You are out of guesses!\n";
	cout << "In case you were wondering, the secret number was: " << ranNum;
	cout << "\n*****************************************************\n";
	AnotherGameMessage(); //Prints a random message prompting the user for another game.
	return false; //Returns false to the main function

}

void WrongGuessMessage()
{
	int failureMessageIndex = 0; //Used to generate random success messages in the switch statement below

	srand(unsigned int(time(NULL))); //Seeds random number generator
	failureMessageIndex = rand() % 10 + 1; //Generates random numbers between 1 and 10
	//Again, remainder of division will always land between 1 and one less than the divisor. So before adding one we have a range of 1-9, after adding one 1-10.

	switch (failureMessageIndex)
	{
	case 1:	cout << "\n\nNope\n";
		break;

	case 2:	cout << "\n\nThat's not it.\n";
		break;

	case 3:	cout << "\n\nKeep trying.\n";
		break;

	case 4:	cout << "\n\nKeep going\n";
		break;

	case 5:	cout << "\n\nTough luck this time\n";
		break;

	case 6:	cout << "\n\nNot quite.\n";
		break;

	case 7:	cout << "\n\nHow disappointing\n";
		break;

	case 8:	cout << "\n\nI'm running out of ways to tell you you're wrong.\n";
		break;

	case 9:	cout << "\n\nPlease try harder to guess the right number next time.\n";
		break;

	case 10: cout << "\n\nNope - enter your next guess.\n";
		break;

	default:	cout << "Other error";
	}
}

void SuccessMessage()
{
	int successMessageIndex = 0; //Used to generate random failure messages in the switch statement below

	srand(unsigned int(time(NULL))); //Seeds random number generator
	successMessageIndex = rand() % 10 + 1; //Generates random numbers between 1 and 10

	switch (successMessageIndex)
	{
	case 1:
		cout << "\n\n!!!!!!!!!\n";
		cout << "Good job!";
		cout << "\n!!!!!!!!!\n\n";
		break;

	case 2:
		cout << "\n\n!!!!!!!!!!\n";
		cout << "That's it!";
		cout << "\n!!!!!!!!!!\n\n";
		break;

	case 3:
		cout << "\n\n!!!!!!!!!!!!!!!!!\n";
		cout << "You got it right!";
		cout << "\n!!!!!!!!!!!!!!!!!\n\n";
		break;

	case 4:
		cout << "\n\n!!!!!\n";
		cout << "Nice!";
		cout << "\n!!!!!\n\n";
		break;

	case 5:
		cout << "\n\n!!!!!!!!!\n";
		cout << "Excelsior";
		cout << "\n!!!!!!!!!\n\n";
		break;

	case 6:
		cout << "\n\n!!!!!!!!!!!!!!\n";
		cout << "That's the one";
		cout << "\n!!!!!!!!!!!!!!\n\n";
		break;

	case 7:
		cout << "\n\n!!!!!!!!!!\n";
		cout << "Outstanding";
		cout << "\n!!!!!!!!!!\n\n";
		break;

	case 8:
		cout << "\n\n!!!!!!!\n";
		cout << "You win";
		cout << "\n!!!!!!!\n\n";
		break;

	case 9:
		cout << "\n\n!!!!!!!!!!\n";
		cout << "You did it";
		cout << "\n!!!!!!!!!!\n\n";
		break;

	case 10:
		cout << "\n\n!!!!!!!!!\n";
		cout << "Excellent";
		cout << "\n!!!!!!!!!\n\n";
		break;

	default:
		cout << "Other error";
	}
}

void AnotherGameMessage()
{
	int MenuPromptIndex = 0; //Used to generate random failure messages in the switch statement below

	srand(unsigned int(time(NULL))); //Seeds random number generator
	MenuPromptIndex = rand() % 10 + 1; //Generates random numbers between 1 and 10

	switch (MenuPromptIndex)
	{
	case 1:
		cout << "\nDo you want to play again?\n";
		break;

	case 2:
		cout << "\nSelect 1 from the menu below if you want to try again.\n";
		break;

	case 3:
		cout << "\nThat was fun - select an option from the following menu\n";
		break;

	case 4:
		cout << "\nTo exit the program, press 2 at the following menu.\n";
		break;

	case 5:
		cout << "\nYou can play again if you want play by pressing '1'\n";
		break;

	case 6:
		cout << "\nIf you press 1 at the following menu a new number will be generated and you can play again.\n";
		break;

	case 7:
		cout << "\nThanks for playing!\n";
		break;

	case 8:
		cout << "\nPlay again if you would like.\n";
		break;

	case 9:
		cout << "\nHow about another game?\n";
		break;

	case 10:
		cout << "\nGive it another shot and play again.\n";
		break;

	default:
		cout << "Error";
	}
}

bool NewGameMenu()
{
	char choice; //Stores user's selection in menu
	bool switchLoop = true; //Loop control for do-while statement menu is nested in.
	bool newGame = true; //Stores return value of function - used to determine if new game is initiated or user terminates program. 

	do {
		cout << "\n\n****\n";
		cout << "MENU\n";
		cout << "****\n";
		cout << "Please make a selection from the menu below:\n";
		cout << "New Game - 1\n";
		cout << "Quit Program - 2\n";

		cout << "Enter your choice: ";
		cin >> choice;
		cout << "\n\n"; //Space before next game.

		switch (choice) {
		case '1':
			newGame = true; //Return value for New_Game_Menu()
			switchLoop = false; //Breaks out of menu loop to return value
			break;

		case '2':
			newGame = false; //Return value for New_Game_Menu()
			switchLoop = false; //Breaks out of menu loop to return value
			break;

		default:	cout << "Invaild choice - you must enter either 1 or 2\n";
			break;
		}
	} while (switchLoop);

	return newGame; //Returns true or false to expression called from in main.
}

void GameOver() //Prints a parting message to the user.
{
	cout << "You quit the game.\n";
	cout << "Here are your final stats:\n";
}