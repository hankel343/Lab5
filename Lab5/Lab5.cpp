#include <iostream>
#include <stdlib.h>
#include <time.h>

using namespace std;

void Wrong_Guess();
	//Precondition: User has entered in a number that is not the random number generated by the computer
	//Postcondition: Returns a message to the user giving them feed back.

void Success_Message();
	//Precondition: User has entered the random number.
	//Postcondition: Returns a message to the user that they have won.

bool New_Game_Menu();
	//Precondition: User has either won or lost the game
	//Postcondition: Returns a boolean value that is used to determine if a new game is started.

void Score_Board(int wins, int losses, int numOfGames);
	//Precondition: Parameters of the function have been initialized
	//Postcondition: Prints a score board that keeps track of values.

int main() {
	bool gameLoop = true;
	bool programLoop = true;
	int wins{0};
	int losses{0};
	int numOfGames{0};

	//Outer do while controls if a new game is executed or not with a boolean value controled do-while conditon.
	do {
		Score_Board(wins, losses, numOfGames);

		int numOfGuesses = 1; //Resets guess count to one every iteration.
		int ranNum{}; //Random number is reinitialized to guarantee a new random number from the last game.
		int guess{}; //Stores user's guess.

		srand(unsigned int(time(NULL))); //Seeds random number generator
		ranNum = rand() % 100 + 1; //Generates random numbers between 0 and 100

		cout << "The computer has generated a random number between 0 and 100 inclusive.\n";
		cout << "You have 20 tries to guess the random number.\n";
		cout << "Enter your first guess: ";
		cin >> guess;

		gameLoop = true; //Allows for repeat games
		//This while loop represents one game.
		while (numOfGuesses < 20 && gameLoop) { //Game loop.
			if (ranNum < 0 || ranNum > 100) { //User enters out of bounds number.
				cout << "That number is out of range.\n";
			}
			else if (guess != ranNum) { //User enters incorrect guess.
				++numOfGuesses;
				Wrong_Guess(); //wrong guess returns a failure message.
				cout << "Try again: ";
				cin >> guess;
			}
			else { //User guesses random number.
				++wins;
				Success_Message(); //Prints out success message
				if (New_Game_Menu() == 1) { //New game returns boolean data 1 = new game
					gameLoop = false; //Exits current game.
					programLoop = true; //Starts new game.
				}
				else { //User chose to terminate program.
					gameLoop = false; //Breaks out of game loop
					programLoop = false; //Does not start a new game.
				}
			}
		}
		if (numOfGuesses == 20) { //User exceeds twenty guesses
			++losses; //Player has lost, so loss count is incremented.
			cout << "\n\nSorry, you're out of guesses!\n\n";
			if (New_Game_Menu() == 1) { //User is prompted with new game menu.
				programLoop = true; //Stars new game
			}
			else
				programLoop = false; //Terminates program and prints final scores
		}
		++numOfGames; //Incrementer counts how many games have been played.
	} while (programLoop); //Starts new game if true - ends program if false.

	cout << "\n\nFinal stats: \n";

	Score_Board(wins, losses, numOfGames); //Prints total scores before exiting.

	cout << "\n\nGoodbye...\n\n";

	return 0;
}

void Wrong_Guess() {
	int failureMessageIndex{}; //Used to generate random success messages in the if-else ladder below

	srand(unsigned int(time(NULL))); //Seeds random number generator
	failureMessageIndex = rand() % 10 + 1; //Generates random numbers between 0 and 5

	if (failureMessageIndex == 1) {
		cout << "\n\nNope\n";
	}
	else if (failureMessageIndex == 2) {
		cout << "\n\nThat's not it.\n";
	}
	else if (failureMessageIndex == 3) {
		cout << "\n\nKeep trying.\n";
	}
	else if (failureMessageIndex == 4) {
		cout << "\n\nKeep going\n";
	}
	else if (failureMessageIndex == 5) {
		cout << "\n\nTough luck this time\n";
	}
	else if (failureMessageIndex == 6) {
		cout << "\n\nNot quite.\n";
	}
	else if (failureMessageIndex == 7) {
		cout << "\n\n:/\n";
	}
	else if (failureMessageIndex == 8) {
		cout << "\n\nI'm running out of ways to tell you you're wrong.\n";
	}
	else if (failureMessageIndex == 9) {
		cout << "\n\nPlease try harder to guess the right number next time.\n";
	}
	else if (failureMessageIndex == 10) {
		cout << "\n\nNope - enter your next guess.\n";
	}
}

void Success_Message() {
	int successMessageIndex{}; //Used to generate random failure messages in the if-else ladder below

	srand(unsigned int(time(NULL))); //Seeds random number generator
	successMessageIndex = rand() % 10 + 1; //Generates random numbers between 0 and 5

	if (successMessageIndex == 1) {
		cout << "\n\n!!!!!!!!!!!\n";
		cout << "Good job!";
		cout << "\n!!!!!!!!!!!\n\n";
	}
	else if (successMessageIndex == 2) {
		cout << "\n\n!!!!!!!!!!!\n";
		cout << "That's it!";
		cout << "\n!!!!!!!!!!!\n\n";
	}
	else if (successMessageIndex == 3) {
		cout << "\n\n!!!!!!!!!!!\n";
		cout << "You got it right!";
		cout << "\n!!!!!!!!!!!\n\n";
	}
	else if (successMessageIndex == 4) {
		cout << "\n\n!!!!!!!!!!!\n";
		cout << "Nice!";
		cout << "\n!!!!!!!!!!!\n\n";
	}
	else if (successMessageIndex == 5) {
		cout << "\n\n!!!!!!!!!!!\n";
		cout << "Excelsior";
		cout << "\n!!!!!!!!!!!\n\n";
	}
	else if (successMessageIndex == 6) {
		cout << "\n\n!!!!!!!!!!\n";
		cout << "That's the one"; 
		cout << "\n!!!!!!!!!!!!\n\n";
	}
	else if (successMessageIndex == 7) {
		cout << "\n\n!!!!!!!!!!\n";
		cout << "Outstanding";
		cout << "\n!!!!!!!!!!!!\n\n";
	}
	else if (successMessageIndex == 8) {
		cout << "\n\n!!!!!!!!!!\n";
		cout << "You win";
		cout << "\n!!!!!!!!!!!!\n\n";
	}
	else if (successMessageIndex == 9) {
		cout << "\n\n!!!!!!!!!!\n";
		cout << "You did it";
		cout << "\n!!!!!!!!!!!!\n\n";
	}
	else if (successMessageIndex == 10) {
		cout << "\n\n!!!!!!!!!!\n";
		cout << "Excellent";
		cout << "\n!!!!!!!!!!!!\n\n";
	}
}

bool New_Game_Menu() {
	char choice; //Stores user's selection in menu
	bool switchLoop = true; //Loop control for do-while statement menu is nested in.
	bool newGame{}; //Stores return value of function - used to determine if new game is initiated or user terminates program. 

	do {
		cout << "\n\n\nPlease make a selection from the menu below:\n";
		cout << "New Game - 1\n";
		cout << "Quit Program - 2\n";

		cout << "Enter your choice: ";
		cin >> choice;
		cout << "\n\n"; //Space before next game.

		switch (choice) {
		case '1':	newGame = true; //Return value for New_Game_Menu()
			switchLoop = false; //Breaks out of menu loop to return value
			break;

		case '2':	newGame = false; //Return value for New_Game_Menu()
			switchLoop = false; //Breaks out of menu loop to return value
			break;

		default:	cout << "Invaild choice\n";
			break;
		}
	} while (switchLoop);

	return newGame; //Returns true or false to expression called from.
}

void Score_Board(int wins, int losses, int numOfGames) {
	cout << "#################\n";
	cout << "Stats so far: \n";
	cout << "Number of games: " << numOfGames << endl;
	cout << "Games won: " << wins << endl;
	cout << "Games lost: " << losses << endl;
	cout << "#################\n";
}