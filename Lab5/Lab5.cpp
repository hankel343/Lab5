#include <iostream>
#include <stdlib.h>
#include <time.h>

using namespace std;

void GameBanner();
bool NumCompare();
void WrongGuessMessage();
void SuccessMessage();
void AnotherGameMessage();
bool NewGameMenu();
void ScoreBoard(int totalGames, int wins, int losses);
void GameOver();

int main()
{
	bool gameLoop = true;
	int totalGames = 0;
	int wins = 0;
	int losses = 0;

	do
	{
		++totalGames;
		ScoreBoard(totalGames, wins, losses);

		GameBanner();

		if (NumCompare()) {
			++wins;
			SuccessMessage();
			AnotherGameMessage();
			if (NewGameMenu()) {
				gameLoop = true;
				continue; //New game is started
			}
			else {
				gameLoop = false;
				continue; //Game loop is exited
			}
		}
		else {
			++losses;
			if (NewGameMenu()) {
				gameLoop = true;
				continue;
			}
			else {
				gameLoop = false;
				continue;
			}
		}
	} while (gameLoop);

	GameOver();
	ScoreBoard(totalGames, wins, losses);

	cout << "\nGoodbye...";


	return 0;
}

void ScoreBoard(int totalGames, int wins, int losses)
{
	cout << "####################\n";
	cout << "Stats so far: \n";
	cout << "Number of games: " << totalGames << endl;
	cout << "Games won: " << wins << endl;
	cout << "Games lost: " << losses << endl;
	cout << "####################\n\n";
}

void GameBanner()
{
	cout << "***********************************************************************\n";
	cout << "The computer has generated a random number between 1 and 100 inclusive.\n";
	cout << "You have twenty gueses to correctly guess what the secret number is.\n";
	cout << "Enter your first guess: ";
}

bool NumCompare()
{
	/*Even though code in GameBanner() says a random number has been generated, the number isn't generated until this point because
	* ranNum would be a non-local scope and it is important for the logic in this block, hense why it is defined and generated here.*/

	//Random number is generated
	int ranNum; //Stores random number generated by computer.
	srand(unsigned int(time(NULL))); //Seeds random number generator
	ranNum = rand() % 10 + 1; //Generates random numbers between 0 and 100

	int guessCount = 1; //Count control for folowing loop that gives player 20 chances to guess the random number.

	int guess;
	cin >> guess;

	do
	{
		if (!cin) //User enters an invalid data type.
		{
			cout << "\n*********************************************************************\n";
			cout << "You entered an invalid data type.\n";
			cout << "Your input should be only integers between 1 inclusive and 100 inclusive.";
			cout << "\n*********************************************************************\n";
			cin.clear(); //This line clears the failure flag on the input stream.
			cin.ignore(1000, '\n'); //This line ignores anything else in the line that caused the input stream to fail. 1000 is arbitrary and also uses new line char as a termination point.

			cout << "Try again: ";
			cin >> guess;
		}
		else if (isdigit(guess) && guess <= 0 || guess > 100) //User enters out of bounds number. isdigit() method is used to check if input is a number AND outside of the range on both sides.
		{ 
			cout << "\n****************************************\n";
			cout << "That number is out of range.\n";
			cout << "Your input should be between 1 and 100\n";
			cout << "****************************************\n\n";
			cout << "Try again: ";
			cin >> guess;
		}
		else if (guess != ranNum) { //User enters incorrect guess.
			++guessCount;
			WrongGuessMessage(); //wrong guess returns a failure message.
			cout << "Try again: ";
			cin >> guess;
		}
		else
		{ //User guesses random number.
			return true; //NumCompare returns a true value
		}
	} while (guessCount < 20);

	cout << "You are out of guesses!\n";
	AnotherGameMessage();
	return false;

}

void WrongGuessMessage()
{
	int failureMessageIndex = 0; //Used to generate random success messages in the if-else ladder below

	srand(unsigned int(time(NULL))); //Seeds random number generator
	failureMessageIndex = rand() % 10 + 1; //Generates random numbers between 0 and 5

	switch (failureMessageIndex)
	{
	case 1:	cout << "\n\nNope\n";
		break;

	case 2:	cout << "\n\nThat's not it.\n";
		break;

	case 3:	cout << "\n\nKeep trying.\n";
		break;

	case 4:	cout << "\n\nKeep going\n";
		break;

	case 5:	cout << "\n\nTough luck this time\n";
		break;

	case 6:	cout << "\n\nNot quite.\n";
		break;

	case 7:	cout << "\n\n:/\n";
		break;

	case 8:	cout << "\n\nI'm running out of ways to tell you you're wrong.\n";
		break;

	case 9:	cout << "\n\nPlease try harder to guess the right number next time.\n";
		break;

	case 10: cout << "\n\nNope - enter your next guess.\n";
		break;

	default:	cout << "Other error";
	}
}

void SuccessMessage()
{
	int successMessageIndex = 0; //Used to generate random failure messages in the if-else ladder below

	srand(unsigned int(time(NULL))); //Seeds random number generator
	successMessageIndex = rand() % 10 + 1; //Generates random numbers between 0 and 5

	switch (successMessageIndex)
	{
	case 1:
		cout << "\n\n!!!!!!!!!\n";
		cout << "Good job!";
		cout << "\n!!!!!!!!!\n\n";
		break;

	case 2:
		cout << "\n\n!!!!!!!!!!\n";
		cout << "That's it!";
		cout << "\n!!!!!!!!!!\n\n";
		break;

	case 3:
		cout << "\n\n!!!!!!!!!!!!!!!!!\n";
		cout << "You got it right!";
		cout << "\n!!!!!!!!!!!!!!!!!\n\n";
		break;

	case 4:
		cout << "\n\n!!!!!\n";
		cout << "Nice!";
		cout << "\n!!!!!\n\n";
		break;

	case 5:
		cout << "\n\n!!!!!!!!!\n";
		cout << "Excelsior";
		cout << "\n!!!!!!!!!\n\n";
		break;

	case 6:
		cout << "\n\n!!!!!!!!!!!!!!\n";
		cout << "That's the one";
		cout << "\n!!!!!!!!!!!!!!\n\n";
		break;

	case 7:
		cout << "\n\n!!!!!!!!!!\n";
		cout << "Outstanding";
		cout << "\n!!!!!!!!!!\n\n";
		break;

	case 8:
		cout << "\n\n!!!!!!!\n";
		cout << "You win";
		cout << "\n!!!!!!!\n\n";
		break;

	case 9:
		cout << "\n\n!!!!!!!!!!\n";
		cout << "You did it";
		cout << "\n!!!!!!!!!!\n\n";
		break;

	case 10:
		cout << "\n\n!!!!!!!!!\n";
		cout << "Excellent";
		cout << "\n!!!!!!!!!\n\n";
		break;

	default:
		cout << "Other error";
	}
}

void AnotherGameMessage()
{
	int MenuPromptIndex = 0; //Used to generate random failure messages in the if-else ladder below

	srand(unsigned int(time(NULL))); //Seeds random number generator
	MenuPromptIndex = rand() % 10 + 1; //Generates random numbers between 0 and 5

	switch (MenuPromptIndex)
	{
	case 1:
		cout << "\nDo you want to play again?\n";
		break;

	case 2:
		cout << "\nSelect 1 from the menu below if you want to try again.\n";
		break;

	case 3:
		cout << "\nThat was fun - select an option from the following menu\n";
		break;

	case 4:
		cout << "\nTo exit the program, press 2 at the following menu.\n";
		break;

	case 5:
		cout << "\nYou can play again if you want play by pressing '1'\n";
		break;

	case 6:
		cout << "\nIf you press 1 at the following menu a new number will be generated and you can play again.\n";
		break;

	case 7:
		cout << "\nThanks for playing!\n";
		break;

	case 8:
		cout << "\nPlay again if you would like.\n";
		break;

	case 9:
		cout << "\nHow about another game?\n";
		break;

	case 10:
		cout << "\nGive it another shot and play again.\n";
		break;

	default:
		cout << "Error";
	}
}

bool NewGameMenu()
{
	char choice; //Stores user's selection in menu
	bool switchLoop = true; //Loop control for do-while statement menu is nested in.
	bool newGame{}; //Stores return value of function - used to determine if new game is initiated or user terminates program. 

	do {
		cout << "\n\n****\n";
		cout << "MENU\n";
		cout << "****\n";
		cout << "Please make a selection from the menu below:\n";
		cout << "New Game - 1\n";
		cout << "Quit Program - 2\n";

		cout << "Enter your choice: ";
		cin >> choice;
		cout << "\n\n"; //Space before next game.

		switch (choice) {
		case '1':
			newGame = true; //Return value for New_Game_Menu()
			switchLoop = false; //Breaks out of menu loop to return value
			break;

		case '2':
			newGame = false; //Return value for New_Game_Menu()
			switchLoop = false; //Breaks out of menu loop to return value
			break;

		default:	cout << "Invaild choice\n";
			break;
		}
	} while (switchLoop);

	return newGame; //Returns true or false to expression called from.
}

void GameOver()
{
	cout << "You quit the game.\n";
	cout << "Here are your final stats:\n";
}